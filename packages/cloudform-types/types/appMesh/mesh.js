"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const resource_1=require("../resource");class MeshSpec{constructor(properties){Object.assign(this,properties)}}exports.MeshSpec=MeshSpec;class EgressFilter{constructor(properties){Object.assign(this,properties)}}exports.EgressFilter=EgressFilter;class Mesh extends resource_1.ResourceBase{constructor(properties){super("AWS::AppMesh::Mesh",properties||{})}}(exports.default=Mesh).MeshSpec=MeshSpec,Mesh.EgressFilter=EgressFilter,Object.defineProperty(exports,"__esModule",{value:!0});const resource_1=require("../resource");class Duration{constructor(properties){Object.assign(this,properties)}}exports.Duration=Duration;class WeightedTarget{constructor(properties){Object.assign(this,properties)}}exports.WeightedTarget=WeightedTarget;class GrpcRouteMetadataMatchMethod{constructor(properties){Object.assign(this,properties)}}exports.GrpcRouteMetadataMatchMethod=GrpcRouteMetadataMatchMethod;class HeaderMatchMethod{constructor(properties){Object.assign(this,properties)}}exports.HeaderMatchMethod=HeaderMatchMethod;class RouteSpec{constructor(properties){Object.assign(this,properties)}}exports.RouteSpec=RouteSpec;class HttpPathMatch{constructor(properties){Object.assign(this,properties)}}exports.HttpPathMatch=HttpPathMatch;class GrpcRouteMetadata{constructor(properties){Object.assign(this,properties)}}exports.GrpcRouteMetadata=GrpcRouteMetadata;class QueryParameter{constructor(properties){Object.assign(this,properties)}}exports.QueryParameter=QueryParameter;class HttpRouteMatch{constructor(properties){Object.assign(this,properties)}}exports.HttpRouteMatch=HttpRouteMatch;class HttpQueryParameterMatch{constructor(properties){Object.assign(this,properties)}}exports.HttpQueryParameterMatch=HttpQueryParameterMatch;class GrpcRouteAction{constructor(properties){Object.assign(this,properties)}}exports.GrpcRouteAction=GrpcRouteAction;class GrpcRouteMatch{constructor(properties){Object.assign(this,properties)}}exports.GrpcRouteMatch=GrpcRouteMatch;class HttpRoute{constructor(properties){Object.assign(this,properties)}}exports.HttpRoute=HttpRoute;class TcpRouteAction{constructor(properties){Object.assign(this,properties)}}exports.TcpRouteAction=TcpRouteAction;class GrpcRetryPolicy{constructor(properties){Object.assign(this,properties)}}exports.GrpcRetryPolicy=GrpcRetryPolicy;class TcpRoute{constructor(properties){Object.assign(this,properties)}}exports.TcpRoute=TcpRoute;class HttpRetryPolicy{constructor(properties){Object.assign(this,properties)}}exports.HttpRetryPolicy=HttpRetryPolicy;class GrpcTimeout{constructor(properties){Object.assign(this,properties)}}exports.GrpcTimeout=GrpcTimeout;class GrpcRoute{constructor(properties){Object.assign(this,properties)}}exports.GrpcRoute=GrpcRoute;class TcpTimeout{constructor(properties){Object.assign(this,properties)}}exports.TcpTimeout=TcpTimeout;class HttpTimeout{constructor(properties){Object.assign(this,properties)}}exports.HttpTimeout=HttpTimeout;class HttpRouteHeader{constructor(properties){Object.assign(this,properties)}}exports.HttpRouteHeader=HttpRouteHeader;class HttpRouteAction{constructor(properties){Object.assign(this,properties)}}exports.HttpRouteAction=HttpRouteAction;class MatchRange{constructor(properties){Object.assign(this,properties)}}exports.MatchRange=MatchRange;class Route extends resource_1.ResourceBase{constructor(properties){super("AWS::AppMesh::Route",properties)}}(exports.default=Route).Duration=Duration,Route.WeightedTarget=WeightedTarget,Route.GrpcRouteMetadataMatchMethod=GrpcRouteMetadataMatchMethod,Route.HeaderMatchMethod=HeaderMatchMethod,Route.RouteSpec=RouteSpec,Route.HttpPathMatch=HttpPathMatch,Route.GrpcRouteMetadata=GrpcRouteMetadata,Route.QueryParameter=QueryParameter,Route.HttpRouteMatch=HttpRouteMatch,Route.HttpQueryParameterMatch=HttpQueryParameterMatch,Route.GrpcRouteAction=GrpcRouteAction,Route.GrpcRouteMatch=GrpcRouteMatch,Route.HttpRoute=HttpRoute,Route.TcpRouteAction=TcpRouteAction,Route.GrpcRetryPolicy=GrpcRetryPolicy,Route.TcpRoute=TcpRoute,Route.HttpRetryPolicy=HttpRetryPolicy,Route.GrpcTimeout=GrpcTimeout,Route.GrpcRoute=GrpcRoute,Route.TcpTimeout=TcpTimeout,Route.HttpTimeout=HttpTimeout,Route.HttpRouteHeader=HttpRouteHeader,Route.HttpRouteAction=HttpRouteAction,Route.MatchRange=MatchRange;