"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.R=exports.Policies=exports.Listeners=exports.LBCookieStickinessPolicy=exports.AppCookieStickinessPolicy=exports.ConnectionDrainingPolicy=exports.ConnectionSettings=exports.HealthCheck=exports.AccessLoggingPolicy=void 0;const resource_1=require("../resource");class AccessLoggingPolicy{constructor(properties){Object.assign(this,properties)}}exports.AccessLoggingPolicy=AccessLoggingPolicy;class HealthCheck{constructor(properties){Object.assign(this,properties)}}exports.HealthCheck=HealthCheck;class ConnectionSettings{constructor(properties){Object.assign(this,properties)}}exports.ConnectionSettings=ConnectionSettings;class ConnectionDrainingPolicy{constructor(properties){Object.assign(this,properties)}}exports.ConnectionDrainingPolicy=ConnectionDrainingPolicy;class AppCookieStickinessPolicy{constructor(properties){Object.assign(this,properties)}}exports.AppCookieStickinessPolicy=AppCookieStickinessPolicy;class LBCookieStickinessPolicy{constructor(properties){Object.assign(this,properties)}}exports.LBCookieStickinessPolicy=LBCookieStickinessPolicy;class Listeners{constructor(properties){Object.assign(this,properties)}}exports.Listeners=Listeners;class Policies{constructor(properties){Object.assign(this,properties)}}exports.Policies=Policies;class LoadBalancer extends resource_1.ResourceBase{constructor(properties){super("AWS::ElasticLoadBalancing::LoadBalancer",properties)}}(exports.R=LoadBalancer).AccessLoggingPolicy=AccessLoggingPolicy,LoadBalancer.HealthCheck=HealthCheck,LoadBalancer.ConnectionSettings=ConnectionSettings,LoadBalancer.ConnectionDrainingPolicy=ConnectionDrainingPolicy,LoadBalancer.AppCookieStickinessPolicy=AppCookieStickinessPolicy,LoadBalancer.LBCookieStickinessPolicy=LBCookieStickinessPolicy,LoadBalancer.Listeners=Listeners,LoadBalancer.Policies=Policies;