import*as _0 from'./loadBalancer';import*as _1 from'./listenerRule';import*as _2 from'./targetGroup';import*as _3 from'./listener';import*as _4 from'./listenerCertificate';export declare namespace ElasticLoadBalancingV2{const LoadBalancer:typeof _0.R;const ListenerRule:typeof _1.R;const TargetGroup:typeof _2.R;const Listener:typeof _3.R;const ListenerCertificate:typeof _4.R;type LoadBalancer=_0.R;type ListenerRule=_1.R;type TargetGroup=_2.R;type Listener=_3.R;type ListenerCertificate=_4.R;namespace LoadBalancer{type LoadBalancerAttribute=_0.LoadBalancerAttribute;type SubnetMapping=_0.SubnetMapping;}namespace ListenerRule{type SourceIpConfig=_1.SourceIpConfig;type AuthenticateOidcConfig=_1.AuthenticateOidcConfig;type AuthenticateCognitoConfig=_1.AuthenticateCognitoConfig;type QueryStringKeyValue=_1.QueryStringKeyValue;type QueryStringConfig=_1.QueryStringConfig;type PathPatternConfig=_1.PathPatternConfig;type RuleCondition=_1.RuleCondition;type RedirectConfig=_1.RedirectConfig;type HostHeaderConfig=_1.HostHeaderConfig;type FixedResponseConfig=_1.FixedResponseConfig;type Action=_1.Action;type HttpHeaderConfig=_1.HttpHeaderConfig;type ForwardConfig=_1.ForwardConfig;type TargetGroupTuple=_1.TargetGroupTuple;type HttpRequestMethodConfig=_1.HttpRequestMethodConfig;type TargetGroupStickinessConfig=_1.TargetGroupStickinessConfig;}namespace TargetGroup{type TargetDescription=_2.TargetDescription;type TargetGroupAttribute=_2.TargetGroupAttribute;type Matcher=_2.Matcher;}namespace Listener{type ForwardConfig=_3.ForwardConfig;type AuthenticateOidcConfig=_3.AuthenticateOidcConfig;type Certificate=_3.Certificate;type TargetGroupStickinessConfig=_3.TargetGroupStickinessConfig;type AuthenticateCognitoConfig=_3.AuthenticateCognitoConfig;type Action=_3.Action;type RedirectConfig=_3.RedirectConfig;type FixedResponseConfig=_3.FixedResponseConfig;type TargetGroupTuple=_3.TargetGroupTuple;}namespace ListenerCertificate{type Certificate=_4.Certificate;}}