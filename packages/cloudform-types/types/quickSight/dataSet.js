"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const resource_1=require("../resource");class JoinKeyProperties{constructor(properties){Object.assign(this,properties)}}exports.JoinKeyProperties=JoinKeyProperties;class UploadSettings{constructor(properties){Object.assign(this,properties)}}exports.UploadSettings=UploadSettings;class ProjectOperation{constructor(properties){Object.assign(this,properties)}}exports.ProjectOperation=ProjectOperation;class ColumnLevelPermissionRule{constructor(properties){Object.assign(this,properties)}}exports.ColumnLevelPermissionRule=ColumnLevelPermissionRule;class CreateColumnsOperation{constructor(properties){Object.assign(this,properties)}}exports.CreateColumnsOperation=CreateColumnsOperation;class PhysicalTable{constructor(properties){Object.assign(this,properties)}}exports.PhysicalTable=PhysicalTable;class ColumnDescription{constructor(properties){Object.assign(this,properties)}}exports.ColumnDescription=ColumnDescription;class RenameColumnOperation{constructor(properties){Object.assign(this,properties)}}exports.RenameColumnOperation=RenameColumnOperation;class ColumnGroup{constructor(properties){Object.assign(this,properties)}}exports.ColumnGroup=ColumnGroup;class GeoSpatialColumnGroup{constructor(properties){Object.assign(this,properties)}}exports.GeoSpatialColumnGroup=GeoSpatialColumnGroup;class RelationalTable{constructor(properties){Object.assign(this,properties)}}exports.RelationalTable=RelationalTable;class InputColumn{constructor(properties){Object.assign(this,properties)}}exports.InputColumn=InputColumn;class RowLevelPermissionDataSet{constructor(properties){Object.assign(this,properties)}}exports.RowLevelPermissionDataSet=RowLevelPermissionDataSet;class FilterOperation{constructor(properties){Object.assign(this,properties)}}exports.FilterOperation=FilterOperation;class CustomSql{constructor(properties){Object.assign(this,properties)}}exports.CustomSql=CustomSql;class ResourcePermission{constructor(properties){Object.assign(this,properties)}}exports.ResourcePermission=ResourcePermission;class FieldFolder{constructor(properties){Object.assign(this,properties)}}exports.FieldFolder=FieldFolder;class S3Source{constructor(properties){Object.assign(this,properties)}}exports.S3Source=S3Source;class LogicalTable{constructor(properties){Object.assign(this,properties)}}exports.LogicalTable=LogicalTable;class TransformOperation{constructor(properties){Object.assign(this,properties)}}exports.TransformOperation=TransformOperation;class JoinInstruction{constructor(properties){Object.assign(this,properties)}}exports.JoinInstruction=JoinInstruction;class OutputColumn{constructor(properties){Object.assign(this,properties)}}exports.OutputColumn=OutputColumn;class ColumnTag{constructor(properties){Object.assign(this,properties)}}exports.ColumnTag=ColumnTag;class TagColumnOperation{constructor(properties){Object.assign(this,properties)}}exports.TagColumnOperation=TagColumnOperation;class IngestionWaitPolicy{constructor(properties){Object.assign(this,properties)}}exports.IngestionWaitPolicy=IngestionWaitPolicy;class CalculatedColumn{constructor(properties){Object.assign(this,properties)}}exports.CalculatedColumn=CalculatedColumn;class CastColumnTypeOperation{constructor(properties){Object.assign(this,properties)}}exports.CastColumnTypeOperation=CastColumnTypeOperation;class LogicalTableSource{constructor(properties){Object.assign(this,properties)}}exports.LogicalTableSource=LogicalTableSource;class DataSet extends resource_1.ResourceBase{constructor(properties){super("AWS::QuickSight::DataSet",properties||{})}}(exports.default=DataSet).JoinKeyProperties=JoinKeyProperties,DataSet.UploadSettings=UploadSettings,DataSet.ProjectOperation=ProjectOperation,DataSet.ColumnLevelPermissionRule=ColumnLevelPermissionRule,DataSet.CreateColumnsOperation=CreateColumnsOperation,DataSet.PhysicalTable=PhysicalTable,DataSet.ColumnDescription=ColumnDescription,DataSet.RenameColumnOperation=RenameColumnOperation,DataSet.ColumnGroup=ColumnGroup,DataSet.GeoSpatialColumnGroup=GeoSpatialColumnGroup,DataSet.RelationalTable=RelationalTable,DataSet.InputColumn=InputColumn,DataSet.RowLevelPermissionDataSet=RowLevelPermissionDataSet,DataSet.FilterOperation=FilterOperation,DataSet.CustomSql=CustomSql,DataSet.ResourcePermission=ResourcePermission,DataSet.FieldFolder=FieldFolder,DataSet.S3Source=S3Source,DataSet.LogicalTable=LogicalTable,DataSet.TransformOperation=TransformOperation,DataSet.JoinInstruction=JoinInstruction,DataSet.OutputColumn=OutputColumn,DataSet.ColumnTag=ColumnTag,DataSet.TagColumnOperation=TagColumnOperation,DataSet.IngestionWaitPolicy=IngestionWaitPolicy,DataSet.CalculatedColumn=CalculatedColumn,DataSet.CastColumnTypeOperation=CastColumnTypeOperation,DataSet.LogicalTableSource=LogicalTableSource,Object.defineProperty(exports,"__esModule",{value:!0});const resource_1=require("../resource");class DataSourceParameters{constructor(properties){Object.assign(this,properties)}}exports.DataSourceParameters=DataSourceParameters;class AuroraPostgreSqlParameters{constructor(properties){Object.assign(this,properties)}}exports.AuroraPostgreSqlParameters=AuroraPostgreSqlParameters;class DataSourceCredentials{constructor(properties){Object.assign(this,properties)}}exports.DataSourceCredentials=DataSourceCredentials;class CredentialPair{constructor(properties){Object.assign(this,properties)}}exports.CredentialPair=CredentialPair;class SnowflakeParameters{constructor(properties){Object.assign(this,properties)}}exports.SnowflakeParameters=SnowflakeParameters;class SslProperties{constructor(properties){Object.assign(this,properties)}}exports.SslProperties=SslProperties;class S3Parameters{constructor(properties){Object.assign(this,properties)}}exports.S3Parameters=S3Parameters;class PrestoParameters{constructor(properties){Object.assign(this,properties)}}exports.PrestoParameters=PrestoParameters;class ResourcePermission{constructor(properties){Object.assign(this,properties)}}exports.ResourcePermission=ResourcePermission;class SparkParameters{constructor(properties){Object.assign(this,properties)}}exports.SparkParameters=SparkParameters;class AuroraParameters{constructor(properties){Object.assign(this,properties)}}exports.AuroraParameters=AuroraParameters;class MariaDbParameters{constructor(properties){Object.assign(this,properties)}}exports.MariaDbParameters=MariaDbParameters;class TeradataParameters{constructor(properties){Object.assign(this,properties)}}exports.TeradataParameters=TeradataParameters;class AthenaParameters{constructor(properties){Object.assign(this,properties)}}exports.AthenaParameters=AthenaParameters;class ManifestFileLocation{constructor(properties){Object.assign(this,properties)}}exports.ManifestFileLocation=ManifestFileLocation;class MySqlParameters{constructor(properties){Object.assign(this,properties)}}exports.MySqlParameters=MySqlParameters;class OracleParameters{constructor(properties){Object.assign(this,properties)}}exports.OracleParameters=OracleParameters;class AmazonElasticsearchParameters{constructor(properties){Object.assign(this,properties)}}exports.AmazonElasticsearchParameters=AmazonElasticsearchParameters;class DataSourceErrorInfo{constructor(properties){Object.assign(this,properties)}}exports.DataSourceErrorInfo=DataSourceErrorInfo;class VpcConnectionProperties{constructor(properties){Object.assign(this,properties)}}exports.VpcConnectionProperties=VpcConnectionProperties;class RedshiftParameters{constructor(properties){Object.assign(this,properties)}}exports.RedshiftParameters=RedshiftParameters;class PostgreSqlParameters{constructor(properties){Object.assign(this,properties)}}exports.PostgreSqlParameters=PostgreSqlParameters;class RdsParameters{constructor(properties){Object.assign(this,properties)}}exports.RdsParameters=RdsParameters;class SqlServerParameters{constructor(properties){Object.assign(this,properties)}}exports.SqlServerParameters=SqlServerParameters;class DataSource extends resource_1.ResourceBase{constructor(properties){super("AWS::QuickSight::DataSource",properties||{})}}(exports.default=DataSource).DataSourceParameters=DataSourceParameters,DataSource.AuroraPostgreSqlParameters=AuroraPostgreSqlParameters,DataSource.DataSourceCredentials=DataSourceCredentials,DataSource.CredentialPair=CredentialPair,DataSource.SnowflakeParameters=SnowflakeParameters,DataSource.SslProperties=SslProperties,DataSource.S3Parameters=S3Parameters,DataSource.PrestoParameters=PrestoParameters,DataSource.ResourcePermission=ResourcePermission,DataSource.SparkParameters=SparkParameters,DataSource.AuroraParameters=AuroraParameters,DataSource.MariaDbParameters=MariaDbParameters,DataSource.TeradataParameters=TeradataParameters,DataSource.AthenaParameters=AthenaParameters,DataSource.ManifestFileLocation=ManifestFileLocation,DataSource.MySqlParameters=MySqlParameters,DataSource.OracleParameters=OracleParameters,DataSource.AmazonElasticsearchParameters=AmazonElasticsearchParameters,DataSource.DataSourceErrorInfo=DataSourceErrorInfo,DataSource.VpcConnectionProperties=VpcConnectionProperties,DataSource.RedshiftParameters=RedshiftParameters,DataSource.PostgreSqlParameters=PostgreSqlParameters,DataSource.RdsParameters=RdsParameters,DataSource.SqlServerParameters=SqlServerParameters;